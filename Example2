#include <iostream>
#include <vector>
#include <unordered_map>

std::vector<int> twoSum(std::vector<int>& nums, int target) {
    std::unordered_map<int, int> hash;
    std::vector<int> result;

    for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];
        if (hash.find(complement) != hash.end()) {
            result.push_back(hash[complement]);
            result.push_back(i);
            return result;
        }
        hash[nums[i]] = i;
    }

    return result;  // This will never be reached because of the assumption that one solution exists
}

int main() {
    std::vector<int> nums = {3,2,4};
    int target = 6;
    std::vector<int> indices = twoSum(nums, target);
    std::cout << "Output: [" << indices[0] << "," << indices[1] << "]\n";
    return 0;
}
